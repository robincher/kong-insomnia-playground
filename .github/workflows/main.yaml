name: Run Inso and Deck with Konnect

on:
  push:
    branches:
      - 'master'
    paths:
      - 'deck/**'
      - 'blog_insomnia.yaml'

jobs:
  lint-and-export-spec:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'initial commit') }}
    name: Lint and Export API Spec
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Cache Insomnia
      id: cache-inso
      uses: actions/cache@v4
      with:
        path: /tmp/inso
        key: inso-11.6.1
    - name: Setup node
      if: steps.cache-inso.outputs.cache-hit != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: "18"
    - name: Install Insomnia
      if: steps.cache-inso.outputs.cache-hit != 'true'
      run: |
        mkdir -p /tmp/inso
        curl -sL https://github.com/Kong/insomnia/releases/download/core%4011.6.1/inso-linux-x64-11.6.1.tar.xz -o inso.tar.xz
        tar -xf inso.tar.xz -C /tmp/inso
        chmod +x /tmp/inso/inso
    - name: LINT AND EXPORT SPEC
      run: |
        # Use inso CLI to lint spec and create OAS file
        chmod +x /tmp/inso/inso
        export PATH="/tmp/inso:$PATH"
        
        # Lint and export in one step
        inso lint spec --ci -w blog_insomnia.yaml Blog
        inso --ci -w blog_insomnia.yaml export spec Blog > blog.yaml
    - name: Upload blog spec
      uses: actions/upload-artifact@v4
      with:
        name: blog-spec
        path: blog.yaml

  # Run backup in parallel with spec processing
  backup-existing-config:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'initial commit') }}
    name: Backup Existing Configuration
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Cache DecK
      id: cache-deck
      uses: actions/cache@v4
      with:
        path: /tmp/deck
        key: deck-1.47.0
    - name: Setup node
      if: steps.cache-deck.outputs.cache-hit != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: "18"
    - name: Install DecK
      if: steps.cache-deck.outputs.cache-hit != 'true'
      run: |
        mkdir -p /tmp/deck
        curl -sL https://github.com/kong/deck/releases/download/v1.47.0/deck_1.47.0_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp/deck
        chmod +x /tmp/deck/deck
    - name: BACKUP CONFIGURATION
      run: |
        # Use decK CLI to backup existing configuration
        chmod +x /tmp/deck/deck
        export PATH="/tmp/deck:$PATH"
        
        # Backup existing configuration
        deck gateway dump --konnect-addr https://sg.api.konghq.com --konnect-token $KONNECT_TOKEN --konnect-control-plane-name $CP_NAME --select-tag gitops --tls-skip-verify > kong-backup.yaml
      env:
       KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
       CP_NAME: ${{ secrets.CP_NAME }}
    - name: Upload backup
      uses: actions/upload-artifact@v4
      with:
        name: kong-backup
        path: kong-backup.yaml

  generate-kong-config:
    runs-on: ubuntu-latest
    needs: lint-and-export-spec
    name: Generate Kong Configuration
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Cache DecK
      id: cache-deck
      uses: actions/cache@v4
      with:
        path: /tmp/deck
        key: deck-1.47.0
    - name: Setup node
      if: steps.cache-deck.outputs.cache-hit != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: "18"
    - name: Install DecK
      if: steps.cache-deck.outputs.cache-hit != 'true'
      run: |
        mkdir -p /tmp/deck
        curl -sL https://github.com/kong/deck/releases/download/v1.47.0/deck_1.47.0_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp/deck
        chmod +x /tmp/deck/deck
    - name: Download blog spec
      uses: actions/download-artifact@v4
      with:
        name: blog-spec
    - name: GENERATE KONG CONFIGURATION
      run: |
        # Use decK CLI to apply configuration to Kong
        chmod +x /tmp/deck/deck
        export PATH="/tmp/deck:$PATH"
        
        # Generate and configure in one step
        deck file openapi2kong --spec blog.yaml --output-file kong.yaml

        # Optionally update values in Kong config (i.e. service hostnames)
        deck file patch -s kong.yaml -o kong.yaml --selector "$..services[*]" --value 'host:"blog-service.'$DEMO_NAMESPACE'.svc"'

        # Add plugins to the generated configuration
        # deck file add-plugins -s kong.yaml -o kong.yaml --config "$KONG_OIDC_CONF" --selector "$.services[*]"
        deck file add-plugins -s kong.yaml -o kong.yaml ./deck/plugins/*
      env:
        DEMO_NAMESPACE: ${{ secrets.DEMO_NAMESPACE }}
        # KONG_OIDC_CONF: ${{ secrets.KONG_OIDC_PLUGIN }}
    - name: Upload Kong config
      uses: actions/upload-artifact@v4
      with:
        name: kong-config
        path: kong.yaml

  deploy-configuration:
    runs-on: ubuntu-latest
    needs: [generate-kong-config, backup-existing-config]
    name: Deploy Configuration
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Cache DecK
      id: cache-deck
      uses: actions/cache@v4
      with:
        path: /tmp/deck
        key: deck-1.47.0
    - name: Setup node
      if: steps.cache-deck.outputs.cache-hit != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: "18"
    - name: Install DecK
      if: steps.cache-deck.outputs.cache-hit != 'true'
      run: |
        mkdir -p /tmp/deck
        curl -sL https://github.com/kong/deck/releases/download/v1.47.0/deck_1.47.0_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp/deck
        chmod +x /tmp/deck/deck
    - name: Download Kong config
      uses: actions/download-artifact@v4
      with:
        name: kong-config
    - name: APPLY KONG CONFIGURATION
      run: |
        # Use decK CLI to apply configuration to Kong
        chmod +x /tmp/deck/deck
        export PATH="/tmp/deck:$PATH"
        
        # Deploy with increased parallelism for speed
        deck gateway sync --konnect-addr https://sg.api.konghq.com --konnect-token $KONNECT_TOKEN --konnect-control-plane-name $CP_NAME --select-tag gitops --parallelism 5 --tls-skip-verify kong.yaml
      env:
        KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
        CP_NAME: ${{ secrets.CP_NAME }}
# inso-and-deck:
#     name: Run Inso and Deck Actions with Konnect
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout the repository
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       # Set up Node.js for Inso
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: "16"

#       # Install Inso
#       # - name: Install Insomnia
#       #   run: |
#       #     curl -sL https://github.com/Kong/insomnia/releases/download/core%4011.6.1/Insomnia.Core-11.6.1.tar.gz -o inso.tar.xz
#       #     sudo tar -xf inso.tar.xz -C /tmp/
#       #     cp /tmp/inso /usr/local/bin/

#       # # Install docker-compose
#       # - name: Install Compose
#       #   uses: ndeloof/install-compose-action@v0.0.1
#       #   with:
#       #     version: v2.1.0 # defaults to 'latest'
#       #     legacy: true # will also install in PATH as `docker-compose`

#       # # Verify docker-compose running
#       # - name: Install Compose
#       #   run: docker-compose --version

#       # Run docker-compose
#       # - name: Docker-compose - Build the stack
#       #   run: docker-compose -f ./docker/docker-compose-bankong-combined_local_portchange.yaml up -d

#       # # Run Inso tests // run this if you have a service deployed somewhere to test the test suite against
#       # - name: Run Inso Tests
#       #   run: |
#       #     inso run test uts_7eb220b290744c2e95c1c9565999d780 --env env_038c957f9f1749c8bc57927d9655f4b4

#       # Install Deck
#       - name: Install DecK
#         run: |
#           curl -sL https://github.com/kong/deck/releases/download/v1.52.0/deck_1.52.0_linux_amd64.tar.gz -o deck.tar.gz
#           tar -xf deck.tar.gz -C /tmp
#           cp /tmp/deck /usr/local/bin/

#       # Check Deck is installed
#       - name: Deck version
#         run: deck version

#       # Convert OpenAPI specs to DecK
#       - name: Generate Kong declarative configuration from Spec
#         run: deck file openapi2kong --spec ./demo-scenes/openapi-spec.yaml --output-file ./kong.yaml --select-tag gitops

#       # Optional: Validate Configuration with Deck for Konnect
#       - name: Validate Configuration with Deck for Konnect
#         run: |
#           echo "Validating configuration with Konnect..."
#           deck file validate ./kong.yaml

#       # Run Deck Sync for Konnect
#       - name: Sync Configuration with Deck and Konnect
#         env:
#           KONG_KONNECT_TOKEN: ${{ secrets.KONG_KONNECT_TOKEN }}
#         run: |
#           echo "Syncing configuration with Konnect..."
#           deck gateway sync ./kong.yaml --konnect-addr https://sg.api.konghq.com --konnect-token $KONG_KONNECT_TOKEN --konnect-control-plane-name default --select-tag gitops